{"ast":null,"code":"var _jsxFileName = \"/Users/josuelegarda/Desktop/car-lease-app/frontend/src/components/graphRecommendations.js\";\n/**\n * Creates bar charts from the recommendations provided from GPT API and analysis from the analysisService.js script\n */\nimport React from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, LabelList, ReferenceLine } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CarRecommendationCharts = ({\n  analysisResult\n}) => {\n  if (!analysisResult || !analysisResult.success) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full p-4 text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-500\",\n        children: \"Error loading recommendation data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  }\n  const {\n    paymentCalculations,\n    monthlyPaymentComparison,\n    userCriteria\n  } = analysisResult;\n\n  // Helper function to parse car info\n  const parseCarInfo = carData => {\n    // Extract year from car_info string\n    const yearMatch = carData.car_info.match(/20\\d{2}/);\n    const year = yearMatch ? parseInt(yearMatch[0]) : new Date().getFullYear();\n\n    // If we have original_data, use it\n    if (carData.original_data && carData.original_data.make) {\n      return {\n        make: carData.original_data.make || 'Unknown',\n        model: carData.original_data.model || '',\n        trim: carData.original_data.trim || '',\n        year: carData.original_data.year || year,\n        fullName: carData.car_info // Use the full car_info as backup\n      };\n    }\n\n    // Parse from car_info string (e.g., \"BMW X3 xDrive30i\")\n    const carInfoParts = carData.car_info.split(' ');\n    if (carInfoParts.length >= 2) {\n      return {\n        make: carInfoParts[0] || 'Unknown',\n        model: carInfoParts[1] || '',\n        trim: carInfoParts.slice(2).join(' ') || '',\n        year: year,\n        fullName: carData.car_info\n      };\n    }\n\n    // Fallback\n    return {\n      make: carInfoParts[0] || 'Unknown',\n      model: '',\n      trim: '',\n      year: year,\n      fullName: carData.car_info\n    };\n  };\n\n  // Sort cars by budget status\n  const sortedSections = {\n    within_budget: [],\n    below_budget: [],\n    above_budget: [],\n    no_budget_set: []\n  };\n  Object.keys(paymentCalculations).forEach(carKey => {\n    var _monthlyPaymentCompar;\n    const carData = paymentCalculations[carKey];\n    const budgetStatus = ((_monthlyPaymentCompar = monthlyPaymentComparison[carKey]) === null || _monthlyPaymentCompar === void 0 ? void 0 : _monthlyPaymentCompar.status) || 'no_budget_set';\n    if (!carData.error) {\n      var _carData$scenarios$;\n      const carInfo = parseCarInfo(carData);\n      const originalDownPayment = userCriteria.downPayment || 0;\n\n      // Prepare chart data\n      const chartData = carData.scenarios.map((scenario, index) => {\n        var _carData$original_dat;\n        return {\n          downPayment: scenario.down_payment,\n          monthlyPayment: scenario.monthly_payment,\n          downPaymentFormatted: new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0\n          }).format(scenario.down_payment),\n          isOriginal: scenario.scenario === 'original',\n          leaseMonths: ((_carData$original_dat = carData.original_data) === null || _carData$original_dat === void 0 ? void 0 : _carData$original_dat.lease_months) || 36,\n          scenarioIndex: index\n        };\n      }).sort((a, b) => a.downPayment - b.downPayment); // Sort by down payment amount\n\n      sortedSections[budgetStatus].push({\n        carKey,\n        carInfo,\n        title: `${carInfo.year} ${carInfo.fullName}`,\n        // Use fullName which includes the complete car info\n        chartData,\n        originalDownPayment,\n        budgetInfo: monthlyPaymentComparison[carKey],\n        originalMonthlyPayment: ((_carData$scenarios$ = carData.scenarios[0]) === null || _carData$scenarios$ === void 0 ? void 0 : _carData$scenarios$.monthly_payment) || 0\n      });\n    }\n  });\n\n  // Sort within each section by monthly payment\n  Object.keys(sortedSections).forEach(section => {\n    sortedSections[section].sort((a, b) => a.originalMonthlyPayment - b.originalMonthlyPayment);\n  });\n  const sectionOrder = ['within_budget', 'below_budget', 'above_budget', 'no_budget_set'];\n  const sectionLabels = {\n    within_budget: 'Within Budget',\n    below_budget: 'Below Budget',\n    above_budget: 'Above Budget',\n    no_budget_set: 'No Budget Set'\n  };\n  const sectionColors = {\n    within_budget: '#27ae60',\n    below_budget: '#f39c12',\n    above_budget: '#e74c3c',\n    no_budget_set: '#6c757d'\n  };\n\n  // Custom dot component for the line chart\n  const CustomDot = props => {\n    const {\n      cx,\n      cy\n    } = props;\n    // Regular blue dots for all points\n    return /*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: cx,\n      cy: cy,\n      r: 5,\n      fill: \"#3498db\",\n      stroke: \"#2980b9\",\n      strokeWidth: 2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full space-y-8\",\n    children: sectionOrder.map(sectionKey => {\n      const section = sortedSections[sectionKey];\n      if (!section || section.length === 0) return null;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center py-4 px-6 rounded-lg font-bold text-xl\",\n          style: {\n            backgroundColor: `${sectionColors[sectionKey]}20`,\n            color: sectionColors[sectionKey],\n            border: `2px solid ${sectionColors[sectionKey]}`\n          },\n          children: sectionLabels[sectionKey]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), section.map(({\n          carKey,\n          title,\n          chartData,\n          originalDownPayment,\n          budgetInfo\n        }) => {\n          var _carData$original_dat2, _carData$original_dat3;\n          // Get the original car data for this specific car\n          const carData = paymentCalculations[carKey];\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-lg shadow-lg p-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-center text-xl font-bold mb-4\",\n              children: title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-4 p-3 bg-gray-50 rounded text-sm\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Yearly Miles Allowed:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 24\n                }, this), \" \", (_carData$original_dat2 = carData.original_data) !== null && _carData$original_dat2 !== void 0 && _carData$original_dat2.lease_miles_per_year ? carData.original_data.lease_miles_per_year.toLocaleString() : 'Not specified', \" miles\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Lease Term:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 24\n                }, this), \" \", ((_carData$original_dat3 = carData.original_data) === null || _carData$original_dat3 === void 0 ? void 0 : _carData$original_dat3.lease_months) || 'Not specified', \" months\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"h-96\",\n              children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n                width: \"100%\",\n                height: \"100%\",\n                children: /*#__PURE__*/_jsxDEV(LineChart, {\n                  data: chartData,\n                  margin: {\n                    top: 40,\n                    right: 30,\n                    left: 60,\n                    bottom: 60\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(XAxis, {\n                    dataKey: \"downPayment\",\n                    type: \"number\",\n                    scale: \"linear\",\n                    domain: ['dataMin', 'dataMax'],\n                    tickFormatter: value => new Intl.NumberFormat('en-US', {\n                      style: 'currency',\n                      currency: 'USD',\n                      minimumFractionDigits: 0,\n                      maximumFractionDigits: 0\n                    }).format(value),\n                    label: {\n                      value: 'Down Payment',\n                      position: 'insideBottom',\n                      offset: -10,\n                      style: {\n                        textAnchor: 'middle',\n                        fill: '#000',\n                        fontSize: 14,\n                        fontWeight: 'bold'\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 192,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                    tickFormatter: value => new Intl.NumberFormat('en-US', {\n                      style: 'currency',\n                      currency: 'USD',\n                      minimumFractionDigits: 0,\n                      maximumFractionDigits: 0\n                    }).format(value),\n                    label: {\n                      value: 'Monthly Payment',\n                      angle: -90,\n                      position: 'insideLeft',\n                      style: {\n                        textAnchor: 'middle',\n                        fill: '#000',\n                        fontSize: 14,\n                        fontWeight: 'bold'\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                    formatter: (value, name, props) => {\n                      const currency = new Intl.NumberFormat('en-US', {\n                        style: 'currency',\n                        currency: 'USD',\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0\n                      }).format(value);\n                      return [currency, 'Monthly Payment'];\n                    },\n                    labelFormatter: value => `Down Payment: ${new Intl.NumberFormat('en-US', {\n                      style: 'currency',\n                      currency: 'USD',\n                      minimumFractionDigits: 0,\n                      maximumFractionDigits: 0\n                    }).format(value)}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 230,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Line, {\n                    type: \"monotone\",\n                    dataKey: \"monthlyPayment\",\n                    stroke: \"#3498db\",\n                    strokeWidth: 3,\n                    dot: /*#__PURE__*/_jsxDEV(CustomDot, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 256,\n                      columnNumber: 32\n                    }, this),\n                    children: /*#__PURE__*/_jsxDEV(LabelList, {\n                      dataKey: \"monthlyPayment\",\n                      position: \"top\",\n                      formatter: value => new Intl.NumberFormat('en-US', {\n                        style: 'currency',\n                        currency: 'USD',\n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0\n                      }).format(value),\n                      style: {\n                        fill: '#2c3e50',\n                        fontSize: 11,\n                        fontWeight: 500\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 258,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 25\n                  }, this), originalDownPayment > 0 && /*#__PURE__*/_jsxDEV(ReferenceLine, {\n                    x: originalDownPayment,\n                    stroke: \"#e74c3c\",\n                    strokeDasharray: \"5 5\",\n                    strokeWidth: 3,\n                    label: {\n                      value: 'Your Down Payment',\n                      position: 'top',\n                      fill: '#e74c3c',\n                      fontSize: 14,\n                      fontWeight: 'bold',\n                      offset: 10\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 279,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 19\n            }, this)]\n          }, carKey, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 17\n          }, this);\n        })]\n      }, sectionKey, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_c = CarRecommendationCharts;\nexport default CarRecommendationCharts;\nvar _c;\n$RefreshReg$(_c, \"CarRecommendationCharts\");","map":{"version":3,"names":["React","LineChart","Line","XAxis","YAxis","Tooltip","ResponsiveContainer","LabelList","ReferenceLine","jsxDEV","_jsxDEV","CarRecommendationCharts","analysisResult","success","className","children","fileName","_jsxFileName","lineNumber","columnNumber","paymentCalculations","monthlyPaymentComparison","userCriteria","parseCarInfo","carData","yearMatch","car_info","match","year","parseInt","Date","getFullYear","original_data","make","model","trim","fullName","carInfoParts","split","length","slice","join","sortedSections","within_budget","below_budget","above_budget","no_budget_set","Object","keys","forEach","carKey","_monthlyPaymentCompar","budgetStatus","status","error","_carData$scenarios$","carInfo","originalDownPayment","downPayment","chartData","scenarios","map","scenario","index","_carData$original_dat","down_payment","monthlyPayment","monthly_payment","downPaymentFormatted","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","isOriginal","leaseMonths","lease_months","scenarioIndex","sort","a","b","push","title","budgetInfo","originalMonthlyPayment","section","sectionOrder","sectionLabels","sectionColors","CustomDot","props","cx","cy","r","fill","stroke","strokeWidth","sectionKey","backgroundColor","color","border","_carData$original_dat2","_carData$original_dat3","lease_miles_per_year","toLocaleString","width","height","data","margin","top","right","left","bottom","dataKey","type","scale","domain","tickFormatter","value","label","position","offset","textAnchor","fontSize","fontWeight","angle","formatter","name","labelFormatter","dot","x","strokeDasharray","_c","$RefreshReg$"],"sources":["/Users/josuelegarda/Desktop/car-lease-app/frontend/src/components/graphRecommendations.js"],"sourcesContent":["/**\n * Creates bar charts from the recommendations provided from GPT API and analysis from the analysisService.js script\n */\nimport React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n  LabelList,\n  ReferenceLine\n} from 'recharts';\n\nconst CarRecommendationCharts = ({ analysisResult }) => {\n  if (!analysisResult || !analysisResult.success) {\n    return (\n      <div className=\"w-full p-4 text-center\">\n        <p className=\"text-red-500\">Error loading recommendation data</p>\n      </div>\n    );\n  }\n\n  const { paymentCalculations, monthlyPaymentComparison, userCriteria } = analysisResult;\n  \n  // Helper function to parse car info\n  const parseCarInfo = (carData) => {\n    // Extract year from car_info string\n    const yearMatch = carData.car_info.match(/20\\d{2}/);\n    const year = yearMatch ? parseInt(yearMatch[0]) : new Date().getFullYear();\n    \n    // If we have original_data, use it\n    if (carData.original_data && carData.original_data.make) {\n      return {\n        make: carData.original_data.make || 'Unknown',\n        model: carData.original_data.model || '',\n        trim: carData.original_data.trim || '',\n        year: carData.original_data.year || year,\n        fullName: carData.car_info // Use the full car_info as backup\n      };\n    }\n\n    // Parse from car_info string (e.g., \"BMW X3 xDrive30i\")\n    const carInfoParts = carData.car_info.split(' ');\n    \n    if (carInfoParts.length >= 2) {\n      return {\n        make: carInfoParts[0] || 'Unknown',\n        model: carInfoParts[1] || '',\n        trim: carInfoParts.slice(2).join(' ') || '',\n        year: year,\n        fullName: carData.car_info\n      };\n    }\n    \n    // Fallback\n    return {\n      make: carInfoParts[0] || 'Unknown',\n      model: '',\n      trim: '',\n      year: year,\n      fullName: carData.car_info\n    };\n  };\n\n  // Sort cars by budget status\n  const sortedSections = {\n    within_budget: [],\n    below_budget: [],\n    above_budget: [],\n    no_budget_set: []\n  };\n\n  Object.keys(paymentCalculations).forEach(carKey => {\n    const carData = paymentCalculations[carKey];\n    const budgetStatus = monthlyPaymentComparison[carKey]?.status || 'no_budget_set';\n    \n    if (!carData.error) {\n      const carInfo = parseCarInfo(carData);\n      const originalDownPayment = userCriteria.downPayment || 0;\n      \n      // Prepare chart data\n      const chartData = carData.scenarios\n        .map((scenario, index) => ({\n          downPayment: scenario.down_payment,\n          monthlyPayment: scenario.monthly_payment,\n          downPaymentFormatted: new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0\n          }).format(scenario.down_payment),\n          isOriginal: scenario.scenario === 'original',\n          leaseMonths: carData.original_data?.lease_months || 36,\n          scenarioIndex: index\n        }))\n        .sort((a, b) => a.downPayment - b.downPayment); // Sort by down payment amount\n\n      sortedSections[budgetStatus].push({\n        carKey,\n        carInfo,\n        title: `${carInfo.year} ${carInfo.fullName}`, // Use fullName which includes the complete car info\n        chartData,\n        originalDownPayment,\n        budgetInfo: monthlyPaymentComparison[carKey],\n        originalMonthlyPayment: carData.scenarios[0]?.monthly_payment || 0\n      });\n    }\n  });\n\n  // Sort within each section by monthly payment\n  Object.keys(sortedSections).forEach(section => {\n    sortedSections[section].sort((a, b) => a.originalMonthlyPayment - b.originalMonthlyPayment);\n  });\n\n  const sectionOrder = ['within_budget', 'below_budget', 'above_budget', 'no_budget_set'];\n  const sectionLabels = {\n    within_budget: 'Within Budget',\n    below_budget: 'Below Budget',\n    above_budget: 'Above Budget',\n    no_budget_set: 'No Budget Set'\n  };\n\n  const sectionColors = {\n    within_budget: '#27ae60',\n    below_budget: '#f39c12',\n    above_budget: '#e74c3c',\n    no_budget_set: '#6c757d'\n  };\n\n  // Custom dot component for the line chart\n  const CustomDot = (props) => {\n    const { cx, cy } = props;\n    // Regular blue dots for all points\n    return (\n      <circle \n        cx={cx} \n        cy={cy} \n        r={5} \n        fill=\"#3498db\" \n        stroke=\"#2980b9\" \n        strokeWidth={2}\n      />\n    );\n  };\n\n  return (\n    <div className=\"w-full space-y-8\">\n      {sectionOrder.map(sectionKey => {\n        const section = sortedSections[sectionKey];\n        \n        if (!section || section.length === 0) return null;\n\n        return (\n          <div key={sectionKey} className=\"space-y-6\">\n            {/* Section Header */}\n            <div \n              className=\"text-center py-4 px-6 rounded-lg font-bold text-xl\"\n              style={{ \n                backgroundColor: `${sectionColors[sectionKey]}20`,\n                color: sectionColors[sectionKey],\n                border: `2px solid ${sectionColors[sectionKey]}`\n              }}\n            >\n              {sectionLabels[sectionKey]}\n            </div>\n\n            {/* Charts in this section */}\n            {section.map(({ carKey, title, chartData, originalDownPayment, budgetInfo }) => {\n              // Get the original car data for this specific car\n              const carData = paymentCalculations[carKey];\n              \n              return (\n                <div key={carKey} className=\"bg-white rounded-lg shadow-lg p-6\">\n                  {/* Chart Title */}\n                  <h3 className=\"text-center text-xl font-bold mb-4\">{title}</h3>\n                  \n                  {/* Car Lease Details */}\n                  <div className=\"mb-4 p-3 bg-gray-50 rounded text-sm\">\n                    <p><strong>Yearly Miles Allowed:</strong> {carData.original_data?.lease_miles_per_year ? carData.original_data.lease_miles_per_year.toLocaleString() : 'Not specified'} miles</p>\n                    <p><strong>Lease Term:</strong> {carData.original_data?.lease_months || 'Not specified'} months</p>\n                  </div>\n\n                  {/* Chart */}\n                  <div className=\"h-96\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <LineChart \n                        data={chartData} \n                        margin={{ top: 40, right: 30, left: 60, bottom: 60 }}\n                      >\n                        <XAxis\n                          dataKey=\"downPayment\"\n                          type=\"number\"\n                          scale=\"linear\"\n                          domain={['dataMin', 'dataMax']}\n                          tickFormatter={(value) =>\n                            new Intl.NumberFormat('en-US', {\n                              style: 'currency',\n                              currency: 'USD',\n                              minimumFractionDigits: 0,\n                              maximumFractionDigits: 0\n                            }).format(value)\n                          }\n                          label={{\n                            value: 'Down Payment',\n                            position: 'insideBottom',\n                            offset: -10,\n                            style: { textAnchor: 'middle', fill: '#000', fontSize: 14, fontWeight: 'bold' }\n                          }}\n                        />\n                        \n                        <YAxis\n                          tickFormatter={(value) =>\n                            new Intl.NumberFormat('en-US', {\n                              style: 'currency',\n                              currency: 'USD',\n                              minimumFractionDigits: 0,\n                              maximumFractionDigits: 0\n                            }).format(value)\n                          }\n                          label={{\n                            value: 'Monthly Payment',\n                            angle: -90,\n                            position: 'insideLeft',\n                            style: { textAnchor: 'middle', fill: '#000', fontSize: 14, fontWeight: 'bold' }\n                          }}\n                        />\n\n                        <Tooltip\n                          formatter={(value, name, props) => {\n                            const currency = new Intl.NumberFormat('en-US', {\n                              style: 'currency',\n                              currency: 'USD',\n                              minimumFractionDigits: 0,\n                              maximumFractionDigits: 0\n                            }).format(value);\n                            \n                            return [currency, 'Monthly Payment'];\n                          }}\n                          labelFormatter={(value) => \n                            `Down Payment: ${new Intl.NumberFormat('en-US', {\n                              style: 'currency',\n                              currency: 'USD',\n                              minimumFractionDigits: 0,\n                              maximumFractionDigits: 0\n                            }).format(value)}`\n                          }\n                        />\n\n                        <Line \n                          type=\"monotone\"\n                          dataKey=\"monthlyPayment\" \n                          stroke=\"#3498db\"\n                          strokeWidth={3}\n                          dot={<CustomDot />}\n                        >\n                          <LabelList\n                            dataKey=\"monthlyPayment\"\n                            position=\"top\"\n                            formatter={(value) =>\n                              new Intl.NumberFormat('en-US', {\n                                style: 'currency',\n                                currency: 'USD',\n                                minimumFractionDigits: 0,\n                                maximumFractionDigits: 0\n                              }).format(value)\n                            }\n                            style={{\n                              fill: '#2c3e50',\n                              fontSize: 11,\n                              fontWeight: 500\n                            }}\n                          />\n                        </Line>\n\n                        {/* Vertical dashed line for original down payment */}\n                        {originalDownPayment > 0 && (\n                          <ReferenceLine\n                            x={originalDownPayment}\n                            stroke=\"#e74c3c\"\n                            strokeDasharray=\"5 5\"\n                            strokeWidth={3}\n                            label={{\n                              value: 'Your Down Payment',\n                              position: 'top',\n                              fill: '#e74c3c',\n                              fontSize: 14,\n                              fontWeight: 'bold',\n                              offset: 10\n                            }}\n                          />\n                        )}\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CarRecommendationCharts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}